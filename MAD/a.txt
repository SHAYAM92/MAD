//ALERTDIALOGUE+XBUTTON

//kt
package com.example.mode

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.inputmethod.EditorInfo
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import android.widget.Button

import android.view.Menu
import android.view.MenuItem
import android.view.ContextMenu
import android.widget.PopupMenu
import android.view.View

import android.content.Intent // for navigation between activities

import androidx.appcompat.app.AlertDialog



class MainActivity : AppCompatActivity() {

    lateinit var descriptionInput: EditText
    lateinit var yesNoInput: EditText
    lateinit var popupBtn: Button
    lateinit var contextBtn: Button



    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        yesNoInput = findViewById(R.id.yesNoInput)
        popupBtn = findViewById(R.id.popupBtn)
        contextBtn = findViewById(R.id.contextBtn)
        descriptionInput = findViewById(R.id.descriptionInput)

        val closeBtn = findViewById<TextView>(R.id.closeBtn)

        closeBtn.setOnClickListener {
            val builder = AlertDialog.Builder(this)
            builder.setTitle("Exit App")
            builder.setMessage("Are you sure you want to close this page?")

            builder.setPositiveButton("Yes") { dialog, _ ->
                finish() // close the activity
            }

            builder.setNegativeButton("No") { dialog, _ ->
                dialog.dismiss() // dismiss the dialog
            }

            val dialog = builder.create()
            dialog.show()
        }



        val searchBar = findViewById<EditText>(R.id.searchBar)

        // Add action listener for when user presses "Search" or "Enter"
        searchBar.setOnEditorActionListener { v, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH || actionId == EditorInfo.IME_ACTION_DONE) {
                val searchText = searchBar.text.toString()
                if (searchText.isNotEmpty()) {
                    Toast.makeText(this, "Searching for: $searchText", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Type something first", Toast.LENGTH_SHORT).show()
                }
                true
            } else {
                false
            }
        }

        val toastButton = findViewById<Button>(R.id.toastButton)
        toastButton.setOnClickListener {
            Toast.makeText(this, "You created a toast msg", Toast.LENGTH_SHORT).show()
        }

        val idInput = findViewById<EditText>(R.id.idInput)
        val nameInput = findViewById<EditText>(R.id.nameInput)

        val saveBtn = findViewById<Button>(R.id.saveBtn)
        val viewBtn = findViewById<Button>(R.id.viewBtn)
        val clearBtn = findViewById<Button>(R.id.clearBtn)

        val prefs = getSharedPreferences("MyData", MODE_PRIVATE)

        saveBtn.setOnClickListener {
            val id = idInput.text.toString()
            val name = nameInput.text.toString()
            if (id.isNotEmpty() && name.isNotEmpty()) {
                prefs.edit().putString("id", id).putString("name", name).apply()
                Toast.makeText(this, "Saved Successfully!", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "Please fill both fields", Toast.LENGTH_SHORT).show()
            }
        }

        viewBtn.setOnClickListener {
            val id = prefs.getString("id", "N/A")
            val name = prefs.getString("name", "N/A")
            val outputText = findViewById<TextView>(R.id.outputText)
            outputText.text = "ID: $id\nName: $name"

        }

        clearBtn.setOnClickListener {
            prefs.edit().clear().apply()
            idInput.text.clear()
            nameInput.text.clear()
            Toast.makeText(this, "Data Cleared", Toast.LENGTH_SHORT).show()
        }

        popupBtn = findViewById(R.id.popupBtn)

        popupBtn.setOnClickListener { view ->  // ← use a named param instead of 'it'
            val popup = PopupMenu(this, view)
            popup.menuInflater.inflate(R.menu.popup_menu, popup.menu)
            popup.setOnMenuItemClickListener { item ->
                val choice = item.title.toString()
                yesNoInput.setText(choice)
                Toast.makeText(this, "You selected: $choice", Toast.LENGTH_SHORT).show()
                true
            }
            popup.show()
        }

        registerForContextMenu(contextBtn)




    }
    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }


    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.menu_profile -> {
                val intent = Intent(this, MainActivity2::class.java)
                startActivity(intent)
            }
            R.id.menu_settings -> Toast.makeText(this, "Settings Clicked", Toast.LENGTH_SHORT).show()
            R.id.menu_about -> Toast.makeText(this, "About Clicked", Toast.LENGTH_SHORT).show()
        }
        return super.onOptionsItemSelected(item)
    }



    override fun onCreateContextMenu(menu: ContextMenu, v: View, menuInfo: ContextMenu.ContextMenuInfo?) {
        super.onCreateContextMenu(menu, v, menuInfo)
        menu.setHeaderTitle("Select Action")
        menu.add(0, v.id, 0, "Edit")
        menu.add(0, v.id, 1, "Delete")
    }

    override fun onContextItemSelected(item: MenuItem): Boolean {
        return when (item.title) {
            "Edit" -> {
                Toast.makeText(this, "Edit selected", Toast.LENGTH_SHORT).show()
                descriptionInput.setText("Edited text")
                true
            }
            "Delete" -> {
                Toast.makeText(this, "Description deleted", Toast.LENGTH_SHORT).show()
                descriptionInput.setText("")
                true
            }
            else -> super.onContextItemSelected(item)
        }
    }



}
//xml

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#D5F4E6"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/closeBtn"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Close ❌"
        android:textColor="#FF0000"
        android:textStyle="bold"
        android:textSize="16sp"
        android:padding="8dp"
        android:clickable="true"
        android:focusable="true"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"
        android:layout_marginEnd="16dp" />


    <TextView
        android:id="@+id/titleText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="My Cool App "
        android:textSize="24sp"
        android:textStyle="bold"
        android:textColor="#333"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="32dp" />

    <!-- Search Bar -->
    <EditText
        android:id="@+id/searchBar"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="Search here..."
        android:imeOptions="actionSearch"
        android:inputType="text"
        android:padding="12dp"
        android:drawableStart="@android:drawable/ic_menu_search"
        app:layout_constraintTop_toBottomOf="@id/titleText"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"
        android:layout_marginStart="32dp"
        android:layout_marginEnd="32dp"/>

    <!-- Side Title -->
    <TextView
        android:id="@+id/imagesTitle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Images"
        android:textStyle="bold"
        android:textSize="18sp"
        android:textColor="#333"
        app:layout_constraintTop_toBottomOf="@id/searchBar"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginTop="24dp"
        android:layout_marginStart="16dp" />

    <!-- Row of Images with Labels using LinearLayout -->
    <LinearLayout
        android:id="@+id/imageRow"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        app:layout_constraintTop_toBottomOf="@id/imagesTitle"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp">

        <!-- Image 1 -->
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:gravity="center">

            <ImageView
                android:layout_width="80dp"
                android:layout_height="80dp"
                android:src="@drawable/img"
                android:contentDescription="Product 1" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Product 1"
                android:textSize="14sp" />
        </LinearLayout>

        <!-- Image 2 -->
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:gravity="center">

            <ImageView
                android:layout_width="80dp"
                android:layout_height="80dp"
                android:src="@drawable/img_1"
                android:contentDescription="Product 2" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Product 2"
                android:textSize="14sp" />
        </LinearLayout>

        <!-- Image 3 -->
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:gravity="center">

            <ImageView
                android:layout_width="80dp"
                android:layout_height="80dp"
                android:src="@drawable/img_2"
                android:contentDescription="Product 3" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Product 3"
                android:textSize="14sp" />
        </LinearLayout>
    </LinearLayout>

    <!-- Button for Toast -->
    <Button
        android:id="@+id/toastButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Show Toast"
        app:layout_constraintTop_toBottomOf="@id/imageRow"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="24dp" />

    <!-- Input for ID -->
    <EditText
        android:id="@+id/idInput"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="Enter ID"
        android:inputType="text"
        app:layout_constraintTop_toBottomOf="@id/toastButton"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"
        android:layout_marginStart="32dp"
        android:layout_marginEnd="32dp"/>

    <!-- Input for Name -->
    <EditText
        android:id="@+id/nameInput"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="Enter Name"
        android:inputType="textPersonName"
        app:layout_constraintTop_toBottomOf="@id/idInput"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="8dp"
        android:layout_marginStart="32dp"
        android:layout_marginEnd="32dp"/>

    <!-- Yes/No Input with Popup Menu Button -->
    <LinearLayout
        android:id="@+id/yesNoRow"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintTop_toBottomOf="@id/nameInput"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="8dp"
        android:layout_marginStart="32dp"
        android:layout_marginEnd="32dp">

        <EditText
            android:id="@+id/yesNoInput"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:hint="Yes or No"
            android:layout_weight="1" />

        <Button
            android:id="@+id/popupBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Menu"
            android:layout_marginStart="8dp" />
    </LinearLayout>

    <!-- Description Input with Context Menu Button -->
    <LinearLayout
        android:id="@+id/descRow"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintTop_toBottomOf="@id/yesNoRow"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="8dp"
        android:layout_marginStart="32dp"
        android:layout_marginEnd="32dp">

        <EditText
            android:id="@+id/descriptionInput"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:hint="Enter description"
            android:layout_weight="1" />

        <Button
            android:id="@+id/contextBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Options"
            android:layout_marginStart="8dp" />
    </LinearLayout>








    <!-- Button Row: Save, View, Clear -->
    <LinearLayout
        android:id="@+id/btnRow"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintTop_toBottomOf="@id/descRow"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="12dp"
        android:gravity="center"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp">

        <Button
            android:id="@+id/saveBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Save" />

        <Button
            android:id="@+id/viewBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="View"
            android:layout_marginStart="16dp"
            android:layout_marginEnd="16dp" />

        <Button
            android:id="@+id/clearBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Clear" />
    </LinearLayout>

    <TextView
        android:id="@+id/outputText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Output will show here"
        android:textSize="16sp"
        android:textColor="#000"
        android:padding="12dp"
        android:gravity="center"
        android:background="#EEEEEE"
        app:layout_constraintTop_toBottomOf="@id/btnRow"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp" />



</androidx.constraintlayout.widget.ConstraintLayout>

--
//LOCATION

9.8821

78.0816

//gradle .app
implementation("androidx.core:core-ktx:1.13.0")
        implementation("androidx.appcompat:appcompat:1.6.1")
        implementation("com.google.android.material:material:1.9.0")
        implementation("androidx.constraintlayout:constraintlayout:2.1.4")
        implementation("com.google.android.gms:play-services-location:21.0.1")
        testImplementation("junit:junit:4.13.2")
        androidTestImplementation("androidx.test.ext:junit:1.2.1")
        androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
//mani
 <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.INTERNET" />
//xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="24dp"
    android:gravity="center"
    android:background="#FFFDE7">

    <Button
        android:id="@+id/btnGetCurrentLocation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Get Current Location" />

    <TextView
        android:id="@+id/tvCurrentResult"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        android:text="Current Location Info"
        android:textColor="#000000"
        android:textSize="16sp" />

    <EditText
        android:id="@+id/etLat"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Latitude"
        android:inputType="numberDecimal" />

    <EditText
        android:id="@+id/etLon"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Longitude"
        android:inputType="numberDecimal" />

    <Button
        android:id="@+id/btnShowArea"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Get Area from LatLon" />

    <TextView
        android:id="@+id/tvAreaResult"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        android:text="Area Result"
        android:textColor="#000000"
        android:textSize="16sp" />
</LinearLayout>

//kt
package com.example.modefour

import android.Manifest
import android.content.pm.PackageManager
import android.location.Geocoder
import android.location.Location
import android.os.Bundle
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import com.google.android.gms.location.*
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var geocoder: Geocoder
    private val locationRequestCode = 101

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        geocoder = Geocoder(this, Locale.getDefault())

        val btnGetCurrentLocation = findViewById<Button>(R.id.btnGetCurrentLocation)
        val tvCurrentResult = findViewById<TextView>(R.id.tvCurrentResult)
        val etLat = findViewById<EditText>(R.id.etLat)
        val etLon = findViewById<EditText>(R.id.etLon)
        val btnShowArea = findViewById<Button>(R.id.btnShowArea)
        val tvAreaResult = findViewById<TextView>(R.id.tvAreaResult)

        btnGetCurrentLocation.setOnClickListener {
            if (ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                    locationRequestCode
                )
                return@setOnClickListener
            }

            val locationRequest = LocationRequest.create().apply {
                priority = Priority.PRIORITY_HIGH_ACCURACY
                interval = 1000
                fastestInterval = 500
                numUpdates = 1
            }

            val locationCallback = object : LocationCallback() {
                override fun onLocationResult(locationResult: LocationResult) {
                    val location: Location? = locationResult.lastLocation
                    if (location != null && Geocoder.isPresent()) {
                        val lat = location.latitude
                        val lon = location.longitude
                        val addresses = geocoder.getFromLocation(lat, lon, 1)
                        if (!addresses.isNullOrEmpty()) {
                            val address = addresses[0]
                            val fullAddress = buildString {
                                appendLine("Latitude: $lat")
                                appendLine("Longitude: $lon")
                                appendLine("Street: ${address.thoroughfare}")
                                appendLine("City: ${address.locality}")
                                appendLine("State: ${address.adminArea}")
                                appendLine("Country: ${address.countryName}")
                                appendLine("Postal Code: ${address.postalCode}")
                                appendLine("Full Address: ${address.getAddressLine(0)}")
                            }
                            tvCurrentResult.text = fullAddress
                        } else {
                            tvCurrentResult.text = "Address not found 😕"
                        }
                    } else {
                        tvCurrentResult.text = "Location or Geocoder unavailable!"
                    }
                }
            }

            fusedLocationClient.requestLocationUpdates(
                locationRequest,
                locationCallback,
                mainLooper
            )
        }

        btnShowArea.setOnClickListener {
            val lat = etLat.text.toString().toDoubleOrNull()
            val lon = etLon.text.toString().toDoubleOrNull()

            if (lat != null && lon != null && Geocoder.isPresent()) {
                val addressList = geocoder.getFromLocation(lat, lon, 1)
                if (!addressList.isNullOrEmpty()) {
                    val address = addressList[0]
                    val area = address.locality ?: address.subAdminArea ?: "Area not found"
                    val fullAddress = address.getAddressLine(0) ?: "No full address"
                    tvAreaResult.text = "Area: $area\nFull Address: $fullAddress"
                } else {
                    tvAreaResult.text = "Couldn't find area 🧐"
                }
            } else {
                Toast.makeText(this, "Enter valid latitude and longitude!", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        if (requestCode == locationRequestCode && grantResults.isNotEmpty()
            && grantResults[0] == PackageManager.PERMISSION_GRANTED
        ) {
            Toast.makeText(this, "Location permission granted ✅", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "Location permission denied ❌", Toast.LENGTH_SHORT).show()
        }
    }
}








