//LOCATION

9.8821

78.0816

//gradle .app
implementation("androidx.core:core-ktx:1.13.0")
        implementation("androidx.appcompat:appcompat:1.6.1")
        implementation("com.google.android.material:material:1.9.0")
        implementation("androidx.constraintlayout:constraintlayout:2.1.4")
        implementation("com.google.android.gms:play-services-location:21.0.1")
        testImplementation("junit:junit:4.13.2")
        androidTestImplementation("androidx.test.ext:junit:1.2.1")
        androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
//mani
 <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.INTERNET" />
//xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="24dp"
    android:gravity="center"
    android:background="#FFFDE7">

    <Button
        android:id="@+id/btnGetCurrentLocation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Get Current Location" />

    <TextView
        android:id="@+id/tvCurrentResult"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        android:text="Current Location Info"
        android:textColor="#000000"
        android:textSize="16sp" />

    <EditText
        android:id="@+id/etLat"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Latitude"
        android:inputType="numberDecimal" />

    <EditText
        android:id="@+id/etLon"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Longitude"
        android:inputType="numberDecimal" />

    <Button
        android:id="@+id/btnShowArea"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Get Area from LatLon" />

    <TextView
        android:id="@+id/tvAreaResult"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        android:text="Area Result"
        android:textColor="#000000"
        android:textSize="16sp" />
</LinearLayout>

//kt
package com.example.modefour

import android.Manifest
import android.content.pm.PackageManager
import android.location.Geocoder
import android.location.Location
import android.os.Bundle
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import com.google.android.gms.location.*
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var geocoder: Geocoder
    private val locationRequestCode = 101

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        geocoder = Geocoder(this, Locale.getDefault())

        val btnGetCurrentLocation = findViewById<Button>(R.id.btnGetCurrentLocation)
        val tvCurrentResult = findViewById<TextView>(R.id.tvCurrentResult)
        val etLat = findViewById<EditText>(R.id.etLat)
        val etLon = findViewById<EditText>(R.id.etLon)
        val btnShowArea = findViewById<Button>(R.id.btnShowArea)
        val tvAreaResult = findViewById<TextView>(R.id.tvAreaResult)

        btnGetCurrentLocation.setOnClickListener {
            if (ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                    locationRequestCode
                )
                return@setOnClickListener
            }

            val locationRequest = LocationRequest.create().apply {
                priority = Priority.PRIORITY_HIGH_ACCURACY
                interval = 1000
                fastestInterval = 500
                numUpdates = 1
            }

            val locationCallback = object : LocationCallback() {
                override fun onLocationResult(locationResult: LocationResult) {
                    val location: Location? = locationResult.lastLocation
                    if (location != null && Geocoder.isPresent()) {
                        val lat = location.latitude
                        val lon = location.longitude
                        val addresses = geocoder.getFromLocation(lat, lon, 1)
                        if (!addresses.isNullOrEmpty()) {
                            val address = addresses[0]
                            val fullAddress = buildString {
                                appendLine("Latitude: $lat")
                                appendLine("Longitude: $lon")
                                appendLine("Street: ${address.thoroughfare}")
                                appendLine("City: ${address.locality}")
                                appendLine("State: ${address.adminArea}")
                                appendLine("Country: ${address.countryName}")
                                appendLine("Postal Code: ${address.postalCode}")
                                appendLine("Full Address: ${address.getAddressLine(0)}")
                            }
                            tvCurrentResult.text = fullAddress
                        } else {
                            tvCurrentResult.text = "Address not found üòï"
                        }
                    } else {
                        tvCurrentResult.text = "Location or Geocoder unavailable!"
                    }
                }
            }

            fusedLocationClient.requestLocationUpdates(
                locationRequest,
                locationCallback,
                mainLooper
            )
        }

        btnShowArea.setOnClickListener {
            val lat = etLat.text.toString().toDoubleOrNull()
            val lon = etLon.text.toString().toDoubleOrNull()

            if (lat != null && lon != null && Geocoder.isPresent()) {
                val addressList = geocoder.getFromLocation(lat, lon, 1)
                if (!addressList.isNullOrEmpty()) {
                    val address = addressList[0]
                    val area = address.locality ?: address.subAdminArea ?: "Area not found"
                    val fullAddress = address.getAddressLine(0) ?: "No full address"
                    tvAreaResult.text = "Area: $area\nFull Address: $fullAddress"
                } else {
                    tvAreaResult.text = "Couldn't find area üßê"
                }
            } else {
                Toast.makeText(this, "Enter valid latitude and longitude!", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        if (requestCode == locationRequestCode && grantResults.isNotEmpty()
            && grantResults[0] == PackageManager.PERMISSION_GRANTED
        ) {
            Toast.makeText(this, "Location permission granted ‚úÖ", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "Location permission denied ‚ùå", Toast.LENGTH_SHORT).show()
        }
    }
}
